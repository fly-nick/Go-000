// Code generated by entc, DO NOT EDIT.

package customerfollow

import (
	"time"

	"github.com/fly-nick/Go-000/Week04/internal/customer_follow/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StaffId applies equality check predicate on the "staffId" field. It's identical to StaffIdEQ.
func StaffId(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffId), v))
	})
}

// CustomerId applies equality check predicate on the "customerId" field. It's identical to CustomerIdEQ.
func CustomerId(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerId), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeleteBy applies equality check predicate on the "deleteBy" field. It's identical to DeleteByEQ.
func DeleteBy(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteBy), v))
	})
}

// StaffIdEQ applies the EQ predicate on the "staffId" field.
func StaffIdEQ(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffId), v))
	})
}

// StaffIdNEQ applies the NEQ predicate on the "staffId" field.
func StaffIdNEQ(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStaffId), v))
	})
}

// StaffIdIn applies the In predicate on the "staffId" field.
func StaffIdIn(vs ...int64) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStaffId), v...))
	})
}

// StaffIdNotIn applies the NotIn predicate on the "staffId" field.
func StaffIdNotIn(vs ...int64) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStaffId), v...))
	})
}

// StaffIdGT applies the GT predicate on the "staffId" field.
func StaffIdGT(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStaffId), v))
	})
}

// StaffIdGTE applies the GTE predicate on the "staffId" field.
func StaffIdGTE(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStaffId), v))
	})
}

// StaffIdLT applies the LT predicate on the "staffId" field.
func StaffIdLT(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStaffId), v))
	})
}

// StaffIdLTE applies the LTE predicate on the "staffId" field.
func StaffIdLTE(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStaffId), v))
	})
}

// CustomerIdEQ applies the EQ predicate on the "customerId" field.
func CustomerIdEQ(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerId), v))
	})
}

// CustomerIdNEQ applies the NEQ predicate on the "customerId" field.
func CustomerIdNEQ(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerId), v))
	})
}

// CustomerIdIn applies the In predicate on the "customerId" field.
func CustomerIdIn(vs ...int64) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomerId), v...))
	})
}

// CustomerIdNotIn applies the NotIn predicate on the "customerId" field.
func CustomerIdNotIn(vs ...int64) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomerId), v...))
	})
}

// CustomerIdGT applies the GT predicate on the "customerId" field.
func CustomerIdGT(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerId), v))
	})
}

// CustomerIdGTE applies the GTE predicate on the "customerId" field.
func CustomerIdGTE(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerId), v))
	})
}

// CustomerIdLT applies the LT predicate on the "customerId" field.
func CustomerIdLT(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerId), v))
	})
}

// CustomerIdLTE applies the LTE predicate on the "customerId" field.
func CustomerIdLTE(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerId), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int64) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int64) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int64) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// DeleteByEQ applies the EQ predicate on the "deleteBy" field.
func DeleteByEQ(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteBy), v))
	})
}

// DeleteByNEQ applies the NEQ predicate on the "deleteBy" field.
func DeleteByNEQ(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteBy), v))
	})
}

// DeleteByIn applies the In predicate on the "deleteBy" field.
func DeleteByIn(vs ...string) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteBy), v...))
	})
}

// DeleteByNotIn applies the NotIn predicate on the "deleteBy" field.
func DeleteByNotIn(vs ...string) predicate.CustomerFollow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerFollow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteBy), v...))
	})
}

// DeleteByGT applies the GT predicate on the "deleteBy" field.
func DeleteByGT(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteBy), v))
	})
}

// DeleteByGTE applies the GTE predicate on the "deleteBy" field.
func DeleteByGTE(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteBy), v))
	})
}

// DeleteByLT applies the LT predicate on the "deleteBy" field.
func DeleteByLT(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteBy), v))
	})
}

// DeleteByLTE applies the LTE predicate on the "deleteBy" field.
func DeleteByLTE(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteBy), v))
	})
}

// DeleteByContains applies the Contains predicate on the "deleteBy" field.
func DeleteByContains(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeleteBy), v))
	})
}

// DeleteByHasPrefix applies the HasPrefix predicate on the "deleteBy" field.
func DeleteByHasPrefix(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeleteBy), v))
	})
}

// DeleteByHasSuffix applies the HasSuffix predicate on the "deleteBy" field.
func DeleteByHasSuffix(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeleteBy), v))
	})
}

// DeleteByIsNil applies the IsNil predicate on the "deleteBy" field.
func DeleteByIsNil() predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteBy)))
	})
}

// DeleteByNotNil applies the NotNil predicate on the "deleteBy" field.
func DeleteByNotNil() predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteBy)))
	})
}

// DeleteByEqualFold applies the EqualFold predicate on the "deleteBy" field.
func DeleteByEqualFold(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeleteBy), v))
	})
}

// DeleteByContainsFold applies the ContainsFold predicate on the "deleteBy" field.
func DeleteByContainsFold(v string) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeleteBy), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.CustomerFollow) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerFollow) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerFollow) predicate.CustomerFollow {
	return predicate.CustomerFollow(func(s *sql.Selector) {
		p(s.Not())
	})
}
