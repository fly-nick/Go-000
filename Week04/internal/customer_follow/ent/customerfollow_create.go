// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fly-nick/Go-000/Week04/internal/customer_follow/ent/customerfollow"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// CustomerFollowCreate is the builder for creating a CustomerFollow entity.
type CustomerFollowCreate struct {
	config
	mutation *CustomerFollowMutation
	hooks    []Hook
}

// SetStaffId sets the staffId field.
func (cfc *CustomerFollowCreate) SetStaffId(i int64) *CustomerFollowCreate {
	cfc.mutation.SetStaffId(i)
	return cfc
}

// SetCustomerId sets the customerId field.
func (cfc *CustomerFollowCreate) SetCustomerId(i int64) *CustomerFollowCreate {
	cfc.mutation.SetCustomerId(i)
	return cfc
}

// SetContent sets the content field.
func (cfc *CustomerFollowCreate) SetContent(s string) *CustomerFollowCreate {
	cfc.mutation.SetContent(s)
	return cfc
}

// SetCreateTime sets the createTime field.
func (cfc *CustomerFollowCreate) SetCreateTime(t time.Time) *CustomerFollowCreate {
	cfc.mutation.SetCreateTime(t)
	return cfc
}

// SetDeleted sets the deleted field.
func (cfc *CustomerFollowCreate) SetDeleted(i int64) *CustomerFollowCreate {
	cfc.mutation.SetDeleted(i)
	return cfc
}

// SetDeleteBy sets the deleteBy field.
func (cfc *CustomerFollowCreate) SetDeleteBy(s string) *CustomerFollowCreate {
	cfc.mutation.SetDeleteBy(s)
	return cfc
}

// SetNillableDeleteBy sets the deleteBy field if the given value is not nil.
func (cfc *CustomerFollowCreate) SetNillableDeleteBy(s *string) *CustomerFollowCreate {
	if s != nil {
		cfc.SetDeleteBy(*s)
	}
	return cfc
}

// SetID sets the id field.
func (cfc *CustomerFollowCreate) SetID(i int64) *CustomerFollowCreate {
	cfc.mutation.SetID(i)
	return cfc
}

// Mutation returns the CustomerFollowMutation object of the builder.
func (cfc *CustomerFollowCreate) Mutation() *CustomerFollowMutation {
	return cfc.mutation
}

// Save creates the CustomerFollow in the database.
func (cfc *CustomerFollowCreate) Save(ctx context.Context) (*CustomerFollow, error) {
	var (
		err  error
		node *CustomerFollow
	)
	if len(cfc.hooks) == 0 {
		if err = cfc.check(); err != nil {
			return nil, err
		}
		node, err = cfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerFollowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfc.check(); err != nil {
				return nil, err
			}
			cfc.mutation = mutation
			node, err = cfc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfc.hooks) - 1; i >= 0; i-- {
			mut = cfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CustomerFollowCreate) SaveX(ctx context.Context) *CustomerFollow {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CustomerFollowCreate) check() error {
	if _, ok := cfc.mutation.StaffId(); !ok {
		return &ValidationError{Name: "staffId", err: errors.New("ent: missing required field \"staffId\"")}
	}
	if _, ok := cfc.mutation.CustomerId(); !ok {
		return &ValidationError{Name: "customerId", err: errors.New("ent: missing required field \"customerId\"")}
	}
	if _, ok := cfc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New("ent: missing required field \"content\"")}
	}
	if _, ok := cfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New("ent: missing required field \"createTime\"")}
	}
	if _, ok := cfc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (cfc *CustomerFollowCreate) sqlSave(ctx context.Context) (*CustomerFollow, error) {
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cfc *CustomerFollowCreate) createSpec() (*CustomerFollow, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerFollow{config: cfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customerfollow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customerfollow.FieldID,
			},
		}
	)
	if id, ok := cfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfc.mutation.StaffId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customerfollow.FieldStaffId,
		})
		_node.StaffId = value
	}
	if value, ok := cfc.mutation.CustomerId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customerfollow.FieldCustomerId,
		})
		_node.CustomerId = value
	}
	if value, ok := cfc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customerfollow.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := cfc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customerfollow.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cfc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customerfollow.FieldDeleted,
		})
		_node.Deleted = value
	}
	if value, ok := cfc.mutation.DeleteBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customerfollow.FieldDeleteBy,
		})
		_node.DeleteBy = value
	}
	return _node, _spec
}

// CustomerFollowCreateBulk is the builder for creating a bulk of CustomerFollow entities.
type CustomerFollowCreateBulk struct {
	config
	builders []*CustomerFollowCreate
}

// Save creates the CustomerFollow entities in the database.
func (cfcb *CustomerFollowCreateBulk) Save(ctx context.Context) ([]*CustomerFollow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CustomerFollow, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerFollowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cfcb *CustomerFollowCreateBulk) SaveX(ctx context.Context) []*CustomerFollow {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
