// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/fly-nick/Go-000/Week04/internal/customer_follow/ent/customerfollow"
	"github.com/fly-nick/Go-000/Week04/internal/customer_follow/ent/predicate"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomerFollow = "CustomerFollow"
)

// CustomerFollowMutation represents an operation that mutate the CustomerFollows
// nodes in the graph.
type CustomerFollowMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	staffId       *int64
	addstaffId    *int64
	customerId    *int64
	addcustomerId *int64
	content       *string
	createTime    *time.Time
	deleted       *int64
	adddeleted    *int64
	deleteBy      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CustomerFollow, error)
	predicates    []predicate.CustomerFollow
}

var _ ent.Mutation = (*CustomerFollowMutation)(nil)

// customerfollowOption allows to manage the mutation configuration using functional options.
type customerfollowOption func(*CustomerFollowMutation)

// newCustomerFollowMutation creates new mutation for CustomerFollow.
func newCustomerFollowMutation(c config, op Op, opts ...customerfollowOption) *CustomerFollowMutation {
	m := &CustomerFollowMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomerFollow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerFollowID sets the id field of the mutation.
func withCustomerFollowID(id int64) customerfollowOption {
	return func(m *CustomerFollowMutation) {
		var (
			err   error
			once  sync.Once
			value *CustomerFollow
		)
		m.oldValue = func(ctx context.Context) (*CustomerFollow, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CustomerFollow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomerFollow sets the old CustomerFollow of the mutation.
func withCustomerFollow(node *CustomerFollow) customerfollowOption {
	return func(m *CustomerFollowMutation) {
		m.oldValue = func(context.Context) (*CustomerFollow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerFollowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerFollowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on CustomerFollow creation.
func (m *CustomerFollowMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomerFollowMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStaffId sets the staffId field.
func (m *CustomerFollowMutation) SetStaffId(i int64) {
	m.staffId = &i
	m.addstaffId = nil
}

// StaffId returns the staffId value in the mutation.
func (m *CustomerFollowMutation) StaffId() (r int64, exists bool) {
	v := m.staffId
	if v == nil {
		return
	}
	return *v, true
}

// OldStaffId returns the old staffId value of the CustomerFollow.
// If the CustomerFollow object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerFollowMutation) OldStaffId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStaffId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStaffId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStaffId: %w", err)
	}
	return oldValue.StaffId, nil
}

// AddStaffId adds i to staffId.
func (m *CustomerFollowMutation) AddStaffId(i int64) {
	if m.addstaffId != nil {
		*m.addstaffId += i
	} else {
		m.addstaffId = &i
	}
}

// AddedStaffId returns the value that was added to the staffId field in this mutation.
func (m *CustomerFollowMutation) AddedStaffId() (r int64, exists bool) {
	v := m.addstaffId
	if v == nil {
		return
	}
	return *v, true
}

// ResetStaffId reset all changes of the "staffId" field.
func (m *CustomerFollowMutation) ResetStaffId() {
	m.staffId = nil
	m.addstaffId = nil
}

// SetCustomerId sets the customerId field.
func (m *CustomerFollowMutation) SetCustomerId(i int64) {
	m.customerId = &i
	m.addcustomerId = nil
}

// CustomerId returns the customerId value in the mutation.
func (m *CustomerFollowMutation) CustomerId() (r int64, exists bool) {
	v := m.customerId
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerId returns the old customerId value of the CustomerFollow.
// If the CustomerFollow object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerFollowMutation) OldCustomerId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomerId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomerId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerId: %w", err)
	}
	return oldValue.CustomerId, nil
}

// AddCustomerId adds i to customerId.
func (m *CustomerFollowMutation) AddCustomerId(i int64) {
	if m.addcustomerId != nil {
		*m.addcustomerId += i
	} else {
		m.addcustomerId = &i
	}
}

// AddedCustomerId returns the value that was added to the customerId field in this mutation.
func (m *CustomerFollowMutation) AddedCustomerId() (r int64, exists bool) {
	v := m.addcustomerId
	if v == nil {
		return
	}
	return *v, true
}

// ResetCustomerId reset all changes of the "customerId" field.
func (m *CustomerFollowMutation) ResetCustomerId() {
	m.customerId = nil
	m.addcustomerId = nil
}

// SetContent sets the content field.
func (m *CustomerFollowMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the content value in the mutation.
func (m *CustomerFollowMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old content value of the CustomerFollow.
// If the CustomerFollow object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerFollowMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent reset all changes of the "content" field.
func (m *CustomerFollowMutation) ResetContent() {
	m.content = nil
}

// SetCreateTime sets the createTime field.
func (m *CustomerFollowMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the createTime value in the mutation.
func (m *CustomerFollowMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old createTime value of the CustomerFollow.
// If the CustomerFollow object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerFollowMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime reset all changes of the "createTime" field.
func (m *CustomerFollowMutation) ResetCreateTime() {
	m.createTime = nil
}

// SetDeleted sets the deleted field.
func (m *CustomerFollowMutation) SetDeleted(i int64) {
	m.deleted = &i
	m.adddeleted = nil
}

// Deleted returns the deleted value in the mutation.
func (m *CustomerFollowMutation) Deleted() (r int64, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old deleted value of the CustomerFollow.
// If the CustomerFollow object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerFollowMutation) OldDeleted(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// AddDeleted adds i to deleted.
func (m *CustomerFollowMutation) AddDeleted(i int64) {
	if m.adddeleted != nil {
		*m.adddeleted += i
	} else {
		m.adddeleted = &i
	}
}

// AddedDeleted returns the value that was added to the deleted field in this mutation.
func (m *CustomerFollowMutation) AddedDeleted() (r int64, exists bool) {
	v := m.adddeleted
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleted reset all changes of the "deleted" field.
func (m *CustomerFollowMutation) ResetDeleted() {
	m.deleted = nil
	m.adddeleted = nil
}

// SetDeleteBy sets the deleteBy field.
func (m *CustomerFollowMutation) SetDeleteBy(s string) {
	m.deleteBy = &s
}

// DeleteBy returns the deleteBy value in the mutation.
func (m *CustomerFollowMutation) DeleteBy() (r string, exists bool) {
	v := m.deleteBy
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old deleteBy value of the CustomerFollow.
// If the CustomerFollow object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerFollowMutation) OldDeleteBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteBy is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// ClearDeleteBy clears the value of deleteBy.
func (m *CustomerFollowMutation) ClearDeleteBy() {
	m.deleteBy = nil
	m.clearedFields[customerfollow.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the field deleteBy was cleared in this mutation.
func (m *CustomerFollowMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[customerfollow.FieldDeleteBy]
	return ok
}

// ResetDeleteBy reset all changes of the "deleteBy" field.
func (m *CustomerFollowMutation) ResetDeleteBy() {
	m.deleteBy = nil
	delete(m.clearedFields, customerfollow.FieldDeleteBy)
}

// Op returns the operation name.
func (m *CustomerFollowMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CustomerFollow).
func (m *CustomerFollowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomerFollowMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.staffId != nil {
		fields = append(fields, customerfollow.FieldStaffId)
	}
	if m.customerId != nil {
		fields = append(fields, customerfollow.FieldCustomerId)
	}
	if m.content != nil {
		fields = append(fields, customerfollow.FieldContent)
	}
	if m.createTime != nil {
		fields = append(fields, customerfollow.FieldCreateTime)
	}
	if m.deleted != nil {
		fields = append(fields, customerfollow.FieldDeleted)
	}
	if m.deleteBy != nil {
		fields = append(fields, customerfollow.FieldDeleteBy)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomerFollowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customerfollow.FieldStaffId:
		return m.StaffId()
	case customerfollow.FieldCustomerId:
		return m.CustomerId()
	case customerfollow.FieldContent:
		return m.Content()
	case customerfollow.FieldCreateTime:
		return m.CreateTime()
	case customerfollow.FieldDeleted:
		return m.Deleted()
	case customerfollow.FieldDeleteBy:
		return m.DeleteBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomerFollowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customerfollow.FieldStaffId:
		return m.OldStaffId(ctx)
	case customerfollow.FieldCustomerId:
		return m.OldCustomerId(ctx)
	case customerfollow.FieldContent:
		return m.OldContent(ctx)
	case customerfollow.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case customerfollow.FieldDeleted:
		return m.OldDeleted(ctx)
	case customerfollow.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	}
	return nil, fmt.Errorf("unknown CustomerFollow field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerFollowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customerfollow.FieldStaffId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStaffId(v)
		return nil
	case customerfollow.FieldCustomerId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerId(v)
		return nil
	case customerfollow.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case customerfollow.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case customerfollow.FieldDeleted:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case customerfollow.FieldDeleteBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerFollow field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomerFollowMutation) AddedFields() []string {
	var fields []string
	if m.addstaffId != nil {
		fields = append(fields, customerfollow.FieldStaffId)
	}
	if m.addcustomerId != nil {
		fields = append(fields, customerfollow.FieldCustomerId)
	}
	if m.adddeleted != nil {
		fields = append(fields, customerfollow.FieldDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomerFollowMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case customerfollow.FieldStaffId:
		return m.AddedStaffId()
	case customerfollow.FieldCustomerId:
		return m.AddedCustomerId()
	case customerfollow.FieldDeleted:
		return m.AddedDeleted()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerFollowMutation) AddField(name string, value ent.Value) error {
	switch name {
	case customerfollow.FieldStaffId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStaffId(v)
		return nil
	case customerfollow.FieldCustomerId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCustomerId(v)
		return nil
	case customerfollow.FieldDeleted:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown CustomerFollow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomerFollowMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customerfollow.FieldDeleteBy) {
		fields = append(fields, customerfollow.FieldDeleteBy)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomerFollowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerFollowMutation) ClearField(name string) error {
	switch name {
	case customerfollow.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	}
	return fmt.Errorf("unknown CustomerFollow nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomerFollowMutation) ResetField(name string) error {
	switch name {
	case customerfollow.FieldStaffId:
		m.ResetStaffId()
		return nil
	case customerfollow.FieldCustomerId:
		m.ResetCustomerId()
		return nil
	case customerfollow.FieldContent:
		m.ResetContent()
		return nil
	case customerfollow.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case customerfollow.FieldDeleted:
		m.ResetDeleted()
		return nil
	case customerfollow.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	}
	return fmt.Errorf("unknown CustomerFollow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomerFollowMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomerFollowMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomerFollowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomerFollowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomerFollowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomerFollowMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomerFollowMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CustomerFollow unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomerFollowMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CustomerFollow edge %s", name)
}
